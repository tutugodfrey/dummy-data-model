{"version":3,"sources":["../../main/src/DummyDataModel.js"],"names":["DummyDataModel","modelName","model","modelToCreate","result","Promise","resolve","reject","length","push","message","forEach","map","property","value","console","log","modelToUpdate","id","condition"],"mappings":";;;;;;;;;;AAAA,IAAMA;AACL,yBAAYC,SAAZ,EAAuB;AAAA;;AACtB,OAAKA,SAAL,GAAiBA,SAAjB;AACA,OAAKC,KAAL,GAAa,EAAb;AACA;;AAED;;;AANK;AAAA;AAAA,yBAOEC,aAPF,EAOiB;AAAA;;AACrB;AACA,OAAMC,SAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAsB;AAChD;AACA,QAAG,MAAKL,KAAL,CAAWM,MAAX,KAAsB,CAAzB,EAA4B;AAC3B,SAAG,MAAKN,KAAL,CAAWO,IAAX,CAAgBN,aAAhB,CAAH,EAAmC;AAClCG,cAAQH,aAAR;AACA;AACDI,YAAO,EAACG,6BAA2BT,SAA5B,EAAP;AACA,KALD,MAKO;AACN,WAAKC,KAAL,CAAWS,OAAX,CAAmB,UAACT,KAAD,EAAW;AAC7BC,oBAAcS,GAAd,CAAkB,UAACC,QAAD,EAAWC,KAAX,EAAqB;AACtCC,eAAQC,GAAR,YAAqBF,KAArB;AACA,OAFD;AAGA,MAJD;AAKA;AAED,IAfc,CAAf;AAgBA,UAAOV,MAAP;AACA;AA1BI;AAAA;AAAA,yBA4BEa,aA5BF,EA4BiB;AACrB;;AAEA;AA/BI;AAAA;AAAA,2BAiCIC,EAjCJ,EAiCQ;AACZ;;AAEA;AApCI;AAAA;AAAA,uBAsCAC,SAtCA,EAsCW;AAAA;;AACf;AACA,OAAMf,SAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAsB;AAChDD,YAAQ,OAAKJ,KAAb;AACAK,WAAO,EAACG,6BAA2B,OAAKR,KAAjC,EAAP;AACA,IAHc,CAAf;AAIA,UAAOE,MAAP;AACA;AA7CI;AAAA;AAAA,4BA+CK;AAAA;;AACT;AACA,OAAMA,SAAS,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAsB;;AAEhDD,YAAQ,OAAKJ,KAAb;AACAK,WAAO,EAACG,6BAA2B,OAAKR,KAAjC,EAAP;AACA,IAJc,CAAf;AAKA,UAAOE,MAAP;AACA;AAvDI;AAAA;AAAA,0BAyDGc,EAzDH,EAyDO;AACX;;AAEA;AA5DI;;AAAA;AAAA,GAAN;;kBA+DelB,c","file":"DummyDataModel.js","sourcesContent":["const DummyDataModel = class {\r\n\tconstructor(modelName) {\r\n\t\tthis.modelName = modelName;\r\n\t\tthis.model = [];\r\n\t}\r\n\r\n\t// define class methods\r\n\tcreate(modelToCreate) {\r\n\t\t// create a new model\r\n\t\tconst result = new Promise((resolve, reject)  => {\r\n\t\t\t// check if data already exist\r\n\t\t\tif(this.model.length === 0) {\r\n\t\t\t\tif(this.model.push(modelToCreate)) {\r\n\t\t\t\t\tresolve(modelToCreate);\r\n\t\t\t\t};\r\n\t\t\t\treject({message: `Can not create ${modelName}`});\r\n\t\t\t} else {\r\n\t\t\t\tthis.model.forEach((model) => {\r\n\t\t\t\t\tmodelToCreate.map((property, value) => {\r\n\t\t\t\t\t\tconsole.log(`model ${value}`);\r\n\t\t\t\t\t})\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t\t\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\tupdate(modelToUpdate) {\r\n\t\t// update the model \r\n\r\n\t}\r\n\r\n\tfindById(id) {\r\n\t\t// return an object with the given id\r\n\r\n\t}\r\n\r\n\tfind(condition) {\r\n\t\t// return the collections that meet the condition\r\n\t\tconst result = new Promise((resolve, reject)  => {\r\n\t\t\tresolve(this.model);\r\n\t\t\treject({message: `Can not create ${this.model}`});\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\tfindAll() {\r\n\t\t// return all the collection\r\n\t\tconst result = new Promise((resolve, reject)  => {\r\n\t\t\t\r\n\t\t\tresolve(this.model);\r\n\t\t\treject({message: `Can not create ${this.model}`});\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\tdestroy(id) {\r\n\t\t// delete an object from the collection\r\n\r\n\t}\r\n}\r\n\r\nexport default DummyDataModel;"]}