{"version":3,"sources":["../../main/test/test.js"],"names":["expect","users","user1","name","email","address","user2","createdUser2","id","wrongdUser2","updateUser2","describe","it","to","be","a","an","instanceOf","model","create","then","user","eql","update","newUser2","catch","error","message"],"mappings":"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","file":"test.js","sourcesContent":["\r\nimport chai from 'chai';\r\nimport DataModel from './../src/DummyDataModel';\r\n\r\nconst { expect } = chai;\r\nconst users = new DataModel('users');\r\nconst user1 = {\r\n\tname: 'jane doe',\r\n\temail: 'jane_doe@somebody.com',\r\n\taddress: 'somewhere in the world',\r\n}\r\nconst user2 = {\r\n\tname: 'alice',\r\n\temail: 'alice@somebody.com',\r\n\taddress: 'lives in another planet',\r\n}\r\nconst createdUser2 = {\r\n\tid: 2,\r\n\tname: 'alice',\r\n\temail: 'alice@somebody.com',\r\n\taddress: 'lives in another planet',\r\n}\r\nconst wrongdUser2 = {\r\n\tid: 1,\r\n\tname: 'alice',\r\n\temail: 'alice@somebody.com',\r\n\taddress: 'lives in another planet',\r\n}\r\nconst updateUser2 = {\r\n\tname: 'alice bob',\r\n\taddress: 'no living in planet earth',\r\n}\r\n\r\ndescribe('Dummy Data Model', () => {\r\n\tdescribe('DataModel', () => {\r\n\t\tit('should export a function', () => {\r\n\t\t\texpect(DataModel).to.be.a('function');\r\n\t\t})\r\n\t});\r\n\r\n\tdescribe('Users', () => {\r\n\t\tit('should export a function', () => {\r\n\t\t\texpect(users).to.be.a('object');\r\n\t\t});\r\n\t\tit('should be an instance of DataModel', () => {\r\n\t\t\texpect(users).to.be.an.instanceOf(DataModel);\r\n\t\t})\r\n\t});\r\n\r\n\tdescribe('create method', () => {\r\n\t\tit('user model should be an array', () => {\r\n\t\t\texpect(users.model).to.be.an('array');\r\n\t\t})\r\n\t\tit('it should a new user', () => {\r\n\t\t\tusers.create(user1)\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 1,\r\n\t\t\t\t\tname: 'jane doe',\r\n\t\t\t\t\temail: 'jane_doe@somebody.com',\r\n\t\t\t\t\taddress: 'somewhere in the world'\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('it should a another user', () => {\r\n\t\t\tusers.create(user2)\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\tname: 'alice',\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\taddress: 'lives in another planet'\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('lenght of model should increase', () => {\r\n\t\t\texpect(users.model).to.be.an('array');\r\n\t\t})\r\n\t});\r\n\r\n\tdescribe('update method', () => {\r\n\t\tit('should update a model', () => {\r\n\t\t\tusers.update(createdUser2, updateUser2)\r\n\t\t\t.then((newUser2) => {\r\n\t\t\t\texpect(newUser2).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t\taddress: 'no living in planet earth',\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\tit('should not update a wrong model', () => {\r\n\t\t\tusers.update(wrongdUser2, updateUser2)\r\n\t\t\t.then((newUser2) => {\r\n\t\t\t\texpect(newUser2).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t\taddress: 'no living in planet earth',\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\texpect(error).to.eql({ message: `user not found` })\r\n\t\t\t})\r\n\t\t});\r\n\t});\r\n});\r\n"]}