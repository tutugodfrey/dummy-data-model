{"version":3,"sources":["../../main/test/test.js"],"names":["expect","users","user1","name","email","address","user2","createdUser2","id","wrongdUser2","updateUser2","describe","it","to","be","a","an","instanceOf","model","create","then","user","eql","length","equal","update","newUser2","catch","error","message","findById","find","where","findAll","allUsers","have","of","at","least","destroy"],"mappings":"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","file":"test.js","sourcesContent":["\r\nimport chai from 'chai';\r\nimport DataModel from './../src/DummyDataModel';\r\n\r\nconst { expect } = chai;\r\nconst users = new DataModel('users');\r\nconst user1 = {\r\n\tname: 'jane doe',\r\n\temail: 'jane_doe@somebody.com',\r\n\taddress: 'somewhere in the world',\r\n}\r\nconst user2 = {\r\n\tname: 'alice',\r\n\temail: 'alice@somebody.com',\r\n\taddress: 'lives in another planet',\r\n}\r\nconst createdUser2 = {\r\n\tid: 2,\r\n\tname: 'alice',\r\n\temail: 'alice@somebody.com',\r\n\taddress: 'lives in another planet',\r\n}\r\nconst wrongdUser2 = {\r\n\tid: 1,\r\n\tname: 'alice',\r\n\temail: 'alice@somebody.com',\r\n\taddress: 'lives in another planet',\r\n}\r\nconst updateUser2 = {\r\n\tname: 'alice bob',\r\n\taddress: 'now living in planet earth',\r\n}\r\n\r\ndescribe('Dummy Data Model', () => {\r\n\tdescribe('DataModel', () => {\r\n\t\tit('should export a function', () => {\r\n\t\t\texpect(DataModel).to.be.a('function');\r\n\t\t})\r\n\t});\r\n\r\n\tdescribe('Users', () => {\r\n\t\tit('should export a function', () => {\r\n\t\t\texpect(users).to.be.a('object');\r\n\t\t});\r\n\t\tit('should be an instance of DataModel', () => {\r\n\t\t\texpect(users).to.be.an.instanceOf(DataModel);\r\n\t\t})\r\n\t});\r\n\r\n\tdescribe('create method', () => {\r\n\t\tit('user model should be an array', () => {\r\n\t\t\texpect(users.model).to.be.an('array');\r\n\t\t})\r\n\t\tit('it should a new user', () => {\r\n\t\t\tusers.create(user1)\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 1,\r\n\t\t\t\t\tname: 'jane doe',\r\n\t\t\t\t\temail: 'jane_doe@somebody.com',\r\n\t\t\t\t\taddress: 'somewhere in the world'\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('it should a another user', () => {\r\n\t\t\tusers.create(user2)\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\tname: 'alice',\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\taddress: 'lives in another planet'\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('lenght of model should increase', () => {\r\n\t\t\texpect(users.model.length).to.equal(2);\r\n\t\t})\r\n\t});\r\n\r\n\tdescribe('update method', () => {\r\n\t\tit('should update a model', () => {\r\n\t\t\tusers.update(createdUser2, updateUser2)\r\n\t\t\t.then((newUser2) => {\r\n\t\t\t\texpect(newUser2).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t\taddress: 'now living in planet earth',\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\t\tit('should not update a wrong model', () => {\r\n\t\t\tusers.update(wrongdUser2, updateUser2)\r\n\t\t\t.then((newUser2) => {\r\n\t\t\t\texpect(newUser2).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t\taddress: 'now living in planet earth',\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\texpect(error).to.eql({ message: `user not found` })\r\n\t\t\t})\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('findById', () => {\r\n\t\tit('should return the model with the given id', () => {\r\n\t\t\tusers.findById(1)\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 1,\r\n\t\t\t\t\tname: 'jane doe',\r\n\t\t\t\t\temail: 'jane_doe@somebody.com',\r\n\t\t\t\t\taddress: 'somewhere in the world',\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('should return not found if model with given id is not not found', () => {\r\n\t\t\tusers.findById(3)\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 1,\r\n\t\t\t\t\tname: 'jane doe',\r\n\t\t\t\t\temail: 'jane_doe@somebody.com',\r\n\t\t\t\t\taddress: 'somewhere in the world',\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\texpect(error).to.eql({ error: 'user not found' });\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('find', () => {\r\n\t\tit('should find a model that meet the given conditions', () => {\r\n\t\t\tusers.find({\r\n\t\t\t\twhere: {\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t\taddress: 'now living in planet earth',\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t\t});\r\n\r\n\t\tit('should only return a model that meet all conditions', () => {\r\n\t\t\tusers.find({\r\n\t\t\t\twhere: {\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t\tid: 4,\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((user) => {\r\n\t\t\t\texpect(user).to.eql({\r\n\t\t\t\t\tid: 2,\r\n\t\t\t\t\temail: 'alice@somebody.com',\r\n\t\t\t\t\tname: 'alice bob',\r\n\t\t\t\t\taddress: 'now living in planet earth',\r\n\t\t\t\t});\r\n\t\t\t})\r\n\t\t\t.catch((error) => {\r\n\t\t\t\texpect(error).to.eql({ message: 'user not found' });\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('findAll', () => {\r\n\t\tit('should return all models if no condition is specified', () => {\r\n\t\t\tusers.findAll()\r\n\t\t\t.then((allUsers) => {\r\n\t\t\t\texpect(allUsers).to.be.an('array');\r\n\t\t\t\texpect(allUsers.length).to.equal(2);\r\n\t\t\t});\r\n\t\t});\r\n\r\n\t\tit('should return all models that meets the specified conditions', () => {\r\n\t\t\tusers.findAll({\r\n\t\t\t\twhere: {\r\n\t\t\t\t\taddress: 'somewhere in the world',\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((allUsers) => {\r\n\t\t\t\texpect(allUsers).to.be.an('array');\r\n\t\t\t\texpect(allUsers).to.have.length.of.at.least(1);\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\r\n\tdescribe('destroy', () => {\r\n\t\tit('should delete a model that meets the specified condition', () => {\r\n\t\t\tusers.destroy({\r\n\t\t\t\twhere: {\r\n\t\t\t\t\tid: 1,\r\n\t\t\t\t}\r\n\t\t\t})\r\n\t\t\t.then((message) => {\r\n\t\t\t\texpect(message).to.eql({ message: 'user has been deleted' });\r\n\t\t\t})\r\n\t\t})\r\n\t})\r\n});\r\n"]}